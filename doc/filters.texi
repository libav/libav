@chapter Filtergraph description
@c man begin FILTERGRAPH DESCRIPTION

A filtergraph is a directed graph of connected filters. It can contain
cycles, and there can be multiple links between a pair of
filters. Each link has one input pad on one side connecting it to one
filter from which it takes its input, and one output pad on the other
side connecting it to the one filter accepting its output.

Each filter in a filtergraph is an instance of a filter class
registered in the application, which defines the features and the
number of input and output pads of the filter.

A filter with no input pads is called a "source", a filter with no
output pads is called a "sink".

@anchor{Filtergraph syntax}
@section Filtergraph syntax

A filtergraph can be represented using a textual representation, which is
recognized by the @option{-filter}/@option{-vf} and @option{-filter_complex}
options in @command{avconv} and @option{-vf} in @command{avplay}, and by the
@code{avfilter_graph_parse()}/@code{avfilter_graph_parse2()} function defined in
@file{libavfilter/avfilter.h}.

A filterchain consists of a sequence of connected filters, each one
connected to the previous one in the sequence. A filterchain is
represented by a list of ","-separated filter descriptions.

A filtergraph consists of a sequence of filterchains. A sequence of
filterchains is represented by a list of ";"-separated filterchain
descriptions.

A filter is represented by a string of the form:
[@var{in_link_1}]...[@var{in_link_N}]@var{filter_name}=@var{arguments}[@var{out_link_1}]...[@var{out_link_M}]

@var{filter_name} is the name of the filter class of which the
described filter is an instance of, and has to be the name of one of
the filter classes registered in the program.
The name of the filter class is optionally followed by a string
"=@var{arguments}".

@var{arguments} is a string which contains the parameters used to
initialize the filter instance. It may have one of the two allowed forms:
@itemize

@item
A ':'-separated list of @var{key=value} pairs.

@item
A ':'-separated list of @var{value}. In this case, the keys are assumed to be
the option names in the order they are declared. E.g. the @code{fade} filter
declares three options in this order -- @option{type}, @option{start_frame} and
@option{nb_frames}. Then the parameter list @var{in:0:30} means that the value
@var{in} is assigned to the option @option{type}, @var{0} to
@option{start_frame} and @var{30} to @option{nb_frames}.

@end itemize

If the option value itself is a list of items (e.g. the @code{format} filter
takes a list of pixel formats), the items in the list are usually separated by
'|'.

The list of arguments can be quoted using the character "'" as initial
and ending mark, and the character '\' for escaping the characters
within the quoted text; otherwise the argument string is considered
terminated when the next special character (belonging to the set
"[]=;,") is encountered.

The name and arguments of the filter are optionally preceded and
followed by a list of link labels.
A link label allows to name a link and associate it to a filter output
or input pad. The preceding labels @var{in_link_1}
... @var{in_link_N}, are associated to the filter input pads,
the following labels @var{out_link_1} ... @var{out_link_M}, are
associated to the output pads.

When two link labels with the same name are found in the
filtergraph, a link between the corresponding input and output pad is
created.

If an output pad is not labelled, it is linked by default to the first
unlabelled input pad of the next filter in the filterchain.
For example in the filterchain:
@example
nullsrc, split[L1], [L2]overlay, nullsink
@end example
the split filter instance has two output pads, and the overlay filter
instance two input pads. The first output pad of split is labelled
"L1", the first input pad of overlay is labelled "L2", and the second
output pad of split is linked to the second input pad of overlay,
which are both unlabelled.

In a complete filterchain all the unlabelled filter input and output
pads must be connected. A filtergraph is considered valid if all the
filter input and output pads of all the filterchains are connected.

Libavfilter will automatically insert scale filters where format
conversion is required. It is possible to specify swscale flags
for those automatically inserted scalers by prepending
@code{sws_flags=@var{flags};}
to the filtergraph description.

Follows a BNF description for the filtergraph syntax:
@example
@var{NAME}             ::= sequence of alphanumeric characters and '_'
@var{LINKLABEL}        ::= "[" @var{NAME} "]"
@var{LINKLABELS}       ::= @var{LINKLABEL} [@var{LINKLABELS}]
@var{FILTER_ARGUMENTS} ::= sequence of chars (eventually quoted)
@var{FILTER}           ::= [@var{LINKLABELS}] @var{NAME} ["=" @var{FILTER_ARGUMENTS}] [@var{LINKLABELS}]
@var{FILTERCHAIN}      ::= @var{FILTER} [,@var{FILTERCHAIN}]
@var{FILTERGRAPH}      ::= [sws_flags=@var{flags};] @var{FILTERCHAIN} [;@var{FILTERGRAPH}]
@end example

@c man end FILTERGRAPH DESCRIPTION

@chapter Audio Filters
@c man begin AUDIO FILTERS

When you configure your Libav build, you can disable any of the
existing filters using --disable-filters.
The configure output will show the audio filters included in your
build.

Below is a description of the currently available audio filters.

@section aformat

Convert the input audio to one of the specified formats. The framework will
negotiate the most appropriate format to minimize conversions.

The filter accepts the following named parameters:
@table @option

@item sample_fmts
A '|'-separated list of requested sample formats.

@item sample_rates
A '|'-separated list of requested sample rates.

@item channel_layouts
A '|'-separated list of requested channel layouts.

@end table

If a parameter is omitted, all values are allowed.

For example to force the output to either unsigned 8-bit or signed 16-bit stereo:
@example
aformat=sample_fmts=u8|s16:channel_layouts=stereo
@end example

@section amix

Mixes multiple audio inputs into a single output.

For example
@example
avconv -i INPUT1 -i INPUT2 -i INPUT3 -filter_complex amix=inputs=3:duration=first:dropout_transition=3 OUTPUT
@end example
will mix 3 input audio streams to a single output with the same duration as the
first input and a dropout transition time of 3 seconds.

The filter accepts the following named parameters:
@table @option

@item inputs
Number of inputs. If unspecified, it defaults to 2.

@item duration
How to determine the end-of-stream.
@table @option

@item longest
Duration of longest input. (default)

@item shortest
Duration of shortest input.

@item first
Duration of first input.

@end table

@item dropout_transition
Transition time, in seconds, for volume renormalization when an input
stream ends. The default value is 2 seconds.

@end table

@section anull

Pass the audio source unchanged to the output.

@section ashowinfo

Show a line containing various information for each input audio frame.
The input audio is not modified.

The shown line contains a sequence of key/value pairs of the form
@var{key}:@var{value}.

A description of each shown parameter follows:

@table @option
@item n
sequential number of the input frame, starting from 0

@item pts
Presentation timestamp of the input frame, in time base units; the time base
depends on the filter input pad, and is usually 1/@var{sample_rate}.

@item pts_time
presentation timestamp of the input frame in seconds

@item fmt
sample format

@item chlayout
channel layout

@item rate
sample rate for the audio frame

@item nb_samples
number of samples (per channel) in the frame

@item checksum
Adler-32 checksum (printed in hexadecimal) of the audio data. For planar audio
the data is treated as if all the planes were concatenated.

@item plane_checksums
A list of Adler-32 checksums for each data plane.
@end table

@section asplit

Split input audio into several identical outputs.

The filter accepts a single parameter which specifies the number of outputs. If
unspecified, it defaults to 2.

For example
@example
avconv -i INPUT -filter_complex asplit=5 OUTPUT
@end example
will create 5 copies of the input audio.

@section asyncts
Synchronize audio data with timestamps by squeezing/stretching it and/or
dropping samples/adding silence when needed.

The filter accepts the following named parameters:
@table @option

@item compensate
Enable stretching/squeezing the data to make it match the timestamps. Disabled
by default. When disabled, time gaps are covered with silence.

@item min_delta
Minimum difference between timestamps and audio data (in seconds) to trigger
adding/dropping samples. Default value is 0.1. If you get non-perfect sync with
this filter, try setting this parameter to 0.

@item max_comp
Maximum compensation in samples per second. Relevant only with compensate=1.
Default value 500.

@item first_pts
Assume the first pts should be this value. The time base is 1 / sample rate.
This allows for padding/trimming at the start of stream. By default, no
assumption is made about the first frame's expected pts, so no padding or
trimming is done. For example, this could be set to 0 to pad the beginning with
silence if an audio stream starts after the video stream or to trim any samples
with a negative pts due to encoder delay.

@end table

@section channelsplit
Split each channel in input audio stream into a separate output stream.

This filter accepts the following named parameters:
@table @option
@item channel_layout
Channel layout of the input stream. Default is "stereo".
@end table

For example, assuming a stereo input MP3 file
@example
avconv -i in.mp3 -filter_complex channelsplit out.mkv
@end example
will create an output Matroska file with two audio streams, one containing only
the left channel and the other the right channel.

To split a 5.1 WAV file into per-channel files
@example
avconv -i in.wav -filter_complex
'channelsplit=channel_layout=5.1[FL][FR][FC][LFE][SL][SR]'
-map '[FL]' front_left.wav -map '[FR]' front_right.wav -map '[FC]'
front_center.wav -map '[LFE]' lfe.wav -map '[SL]' side_left.wav -map '[SR]'
side_right.wav
@end example

@section channelmap
Remap input channels to new locations.

This filter accepts the following named parameters:
@table @option
@item channel_layout
Channel layout of the output stream.

@item map
Map channels from input to output. The argument is a '|'-separated list of
mappings, each in the @code{@var{in_channel}-@var{out_channel}} or
@var{in_channel} form. @var{in_channel} can be either the name of the input
channel (e.g. FL for front left) or its index in the input channel layout.
@var{out_channel} is the name of the output channel or its index in the output
channel layout. If @var{out_channel} is not given then it is implicitly an
index, starting with zero and increasing by one for each mapping.
@end table

If no mapping is present, the filter will implicitly map input channels to
output channels preserving index.

For example, assuming a 5.1+downmix input MOV file
@example
avconv -i in.mov -filter 'channelmap=map=DL-FL|DR-FR' out.wav
@end example
will create an output WAV file tagged as stereo from the downmix channels of
the input.

To fix a 5.1 WAV improperly encoded in AAC's native channel order
@example
avconv -i in.wav -filter 'channelmap=1|2|0|5|3|4:channel_layout=5.1' out.wav
@end example

@section join
Join multiple input streams into one multi-channel stream.

The filter accepts the following named parameters:
@table @option

@item inputs
Number of input streams. Defaults to 2.

@item channel_layout
Desired output channel layout. Defaults to stereo.

@item map
Map channels from inputs to output. The argument is a '|'-separated list of
mappings, each in the @code{@var{input_idx}.@var{in_channel}-@var{out_channel}}
form. @var{input_idx} is the 0-based index of the input stream. @var{in_channel}
can be either the name of the input channel (e.g. FL for front left) or its
index in the specified input stream. @var{out_channel} is the name of the output
channel.
@end table

The filter will attempt to guess the mappings when those are not specified
explicitly. It does so by first trying to find an unused matching input channel
and if that fails it picks the first unused input channel.

E.g. to join 3 inputs (with properly set channel layouts)
@example
avconv -i INPUT1 -i INPUT2 -i INPUT3 -filter_complex join=inputs=3 OUTPUT
@end example

To build a 5.1 output from 6 single-channel streams:
@example
avconv -i fl -i fr -i fc -i sl -i sr -i lfe -filter_complex
'join=inputs=6:channel_layout=5.1:map=0.0-FL|1.0-FR|2.0-FC|3.0-SL|4.0-SR|5.0-LFE'
out
@end example

@section resample
Convert the audio sample format, sample rate and channel layout. This filter is
not meant to be used directly, it is inserted automatically by libavfilter
whenever conversion is needed. Use the @var{aformat} filter to force a specific
conversion.

@section volume

Adjust the input audio volume.

The filter accepts the following named parameters:
@table @option

@item volume
Expresses how the audio volume will be increased or decreased.

Output values are clipped to the maximum value.

The output audio volume is given by the relation:
@example
@var{output_volume} = @var{volume} * @var{input_volume}
@end example

Default value for @var{volume} is 1.0.

@item precision
Mathematical precision.

This determines which input sample formats will be allowed, which affects the
precision of the volume scaling.

@table @option
@item fixed
8-bit fixed-point; limits input sample format to U8, S16, and S32.
@item float
32-bit floating-point; limits input sample format to FLT. (default)
@item double
64-bit floating-point; limits input sample format to DBL.
@end table
@end table

@subsection Examples

@itemize
@item
Halve the input audio volume:
@example
volume=volume=0.5
volume=volume=1/2
volume=volume=-6.0206dB
@end example

@item
Increase input audio power by 6 decibels using fixed-point precision:
@example
volume=volume=6dB:precision=fixed
@end example
@end itemize

@c man end AUDIO FILTERS

@chapter Audio Sources
@c man begin AUDIO SOURCES

Below is a description of the currently available audio sources.

@section anullsrc

Null audio source, never return audio frames. It is mainly useful as a
template and to be employed in analysis / debugging tools.

It accepts as optional parameter a string of the form
@var{sample_rate}:@var{channel_layout}.

@var{sample_rate} specify the sample rate, and defaults to 44100.

@var{channel_layout} specify the channel layout, and can be either an
integer or a string representing a channel layout. The default value
of @var{channel_layout} is 3, which corresponds to CH_LAYOUT_STEREO.

Check the channel_layout_map definition in
@file{libavutil/channel_layout.c} for the mapping between strings and
channel layout values.

Follow some examples:
@example
#  set the sample rate to 48000 Hz and the channel layout to CH_LAYOUT_MONO.
anullsrc=48000:4

# same as
anullsrc=48000:mono
@end example

@section abuffer
Buffer audio frames, and make them available to the filter chain.

This source is not intended to be part of user-supplied graph descriptions but
for insertion by calling programs through the interface defined in
@file{libavfilter/buffersrc.h}.

It accepts the following named parameters:
@table @option

@item time_base
Timebase which will be used for timestamps of submitted frames. It must be
either a floating-point number or in @var{numerator}/@var{denominator} form.

@item sample_rate
Audio sample rate.

@item sample_fmt
Name of the sample format, as returned by @code{av_get_sample_fmt_name()}.

@item channel_layout
Channel layout of the audio data, in the form that can be accepted by
@code{av_get_channel_layout()}.
@end table

All the parameters need to be explicitly defined.

@c man end AUDIO SOURCES

@chapter Audio Sinks
@c man begin AUDIO SINKS

Below is a description of the currently available audio sinks.

@section anullsink

Null audio sink, do absolutely nothing with the input audio. It is
mainly useful as a template and to be employed in analysis / debugging
tools.

@section abuffersink
This sink is intended for programmatic use. Frames that arrive on this sink can
be retrieved by the calling program using the interface defined in
@file{libavfilter/buffersink.h}.

This filter accepts no parameters.

@c man end AUDIO SINKS

@chapter Video Filters
@c man begin VIDEO FILTERS

When you configure your Libav build, you can disable any of the
existing filters using --disable-filters.
The configure output will show the video filters included in your
build.

Below is a description of the currently available video filters.

@section blackframe

Detect frames that are (almost) completely black. Can be useful to
detect chapter transitions or commercials. Output lines consist of
the frame number of the detected frame, the percentage of blackness,
the position in the file if known or -1 and the timestamp in seconds.

In order to display the output lines, you need to set the loglevel at
least to the AV_LOG_INFO value.

The filter accepts the following options:

@table @option

@item amount
The percentage of the pixels that have to be below the threshold, defaults to
98.

@item threshold
Threshold below which a pixel value is considered black, defaults to 32.

@end table

@section boxblur

Apply boxblur algorithm to the input video.

This filter accepts the following options:

@table @option

@item luma_radius
@item luma_power
@item chroma_radius
@item chroma_power
@item alpha_radius
@item alpha_power

@end table

Chroma and alpha parameters are optional, if not specified they default
to the corresponding values set for @var{luma_radius} and
@var{luma_power}.

@var{luma_radius}, @var{chroma_radius}, and @var{alpha_radius} represent
the radius in pixels of the box used for blurring the corresponding
input plane. They are expressions, and can contain the following
constants:
@table @option
@item w, h
the input width and height in pixels

@item cw, ch
the input chroma image width and height in pixels

@item hsub, vsub
horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" @var{hsub} is 2 and @var{vsub} is 1.
@end table

The radius must be a non-negative number, and must not be greater than
the value of the expression @code{min(w,h)/2} for the luma and alpha planes,
and of @code{min(cw,ch)/2} for the chroma planes.

@var{luma_power}, @var{chroma_power}, and @var{alpha_power} represent
how many times the boxblur filter is applied to the corresponding
plane.

Some examples follow:

@itemize

@item
Apply a boxblur filter with luma, chroma, and alpha radius
set to 2:
@example
boxblur=luma_radius=2:luma_power=1
@end example

@item
Set luma radius to 2, alpha and chroma radius to 0
@example
boxblur=2:1:0:0:0:0
@end example

@item
Set luma and chroma radius to a fraction of the video dimension
@example
boxblur=luma_radius=min(h\,w)/10:luma_power=1:chroma_radius=min(cw\,ch)/10:chroma_power=1
@end example

@end itemize

@section copy

Copy the input source unchanged to the output. Mainly useful for
testing purposes.

@section crop

Crop the input video to given dimensions.

This filter accepts the following options:

@table @option

@item out_w
Width of the output video.

@item out_h
Height of the output video.

@item x
Horizontal position, in the input video, of the left edge of the output video.

@item y
Vertical position, in the input video, of the top edge of the output video.

@end table

The parameters are expressions containing the following constants:

@table @option
@item E, PI, PHI
the corresponding mathematical approximated values for e
(euler number), pi (greek PI), PHI (golden ratio)

@item x, y
the computed values for @var{x} and @var{y}. They are evaluated for
each new frame.

@item in_w, in_h
the input width and height

@item iw, ih
same as @var{in_w} and @var{in_h}

@item out_w, out_h
the output (cropped) width and height

@item ow, oh
same as @var{out_w} and @var{out_h}

@item n
the number of input frame, starting from 0

@item t
timestamp expressed in seconds, NAN if the input timestamp is unknown

@end table

The @var{out_w} and @var{out_h} parameters specify the expressions for
the width and height of the output (cropped) video. They are
evaluated just at the configuration of the filter.

The default value of @var{out_w} is "in_w", and the default value of
@var{out_h} is "in_h".

The expression for @var{out_w} may depend on the value of @var{out_h},
and the expression for @var{out_h} may depend on @var{out_w}, but they
cannot depend on @var{x} and @var{y}, as @var{x} and @var{y} are
evaluated after @var{out_w} and @var{out_h}.

The @var{x} and @var{y} parameters specify the expressions for the
position of the top-left corner of the output (non-cropped) area. They
are evaluated for each frame. If the evaluated value is not valid, it
is approximated to the nearest valid value.

The default value of @var{x} is "(in_w-out_w)/2", and the default
value for @var{y} is "(in_h-out_h)/2", which set the cropped area at
the center of the input image.

The expression for @var{x} may depend on @var{y}, and the expression
for @var{y} may depend on @var{x}.

Follow some examples:
@example
# crop the central input area with size 100x100
crop=out_w=100:out_h=100

# crop the central input area with size 2/3 of the input video
"crop=out_w=2/3*in_w:out_h=2/3*in_h"

# crop the input video central square
crop=out_w=in_h

# delimit the rectangle with the top-left corner placed at position
# 100:100 and the right-bottom corner corresponding to the right-bottom
# corner of the input image.
crop=out_w=in_w-100:out_h=in_h-100:x=100:y=100

# crop 10 pixels from the left and right borders, and 20 pixels from
# the top and bottom borders
"crop=out_w=in_w-2*10:out_h=in_h-2*20"

# keep only the bottom right quarter of the input image
"crop=out_w=in_w/2:out_h=in_h/2:x=in_w/2:y=in_h/2"

# crop height for getting Greek harmony
"crop=out_w=in_w:out_h=1/PHI*in_w"

# trembling effect
"crop=in_w/2:in_h/2:(in_w-out_w)/2+((in_w-out_w)/2)*sin(n/10):(in_h-out_h)/2 +((in_h-out_h)/2)*sin(n/7)"

# erratic camera effect depending on timestamp
"crop=out_w=in_w/2:out_h=in_h/2:x=(in_w-out_w)/2+((in_w-out_w)/2)*sin(t*10):y=(in_h-out_h)/2 +((in_h-out_h)/2)*sin(t*13)"

# set x depending on the value of y
"crop=in_w/2:in_h/2:y:10+10*sin(n/10)"
@end example

@section cropdetect

Auto-detect crop size.

Calculate necessary cropping parameters and prints the recommended
parameters through the logging system. The detected dimensions
correspond to the non-black area of the input video.

This filter accepts the following options:

@table @option

@item limit
Threshold, which can be optionally specified from nothing (0) to
everything (255), defaults to 24.

@item round
Value which the width/height should be divisible by, defaults to
16. The offset is automatically adjusted to center the video. Use 2 to
get only even dimensions (needed for 4:2:2 video). 16 is best when
encoding to most video codecs.

@item reset
Counter that determines after how many frames cropdetect will reset
the previously detected largest video area and start over to detect
the current optimal crop area. Defaults to 0.

This can be useful when channel logos distort the video area. 0
indicates never reset and return the largest area encountered during
playback.
@end table

@section delogo

Suppress a TV station logo by a simple interpolation of the surrounding
pixels. Just set a rectangle covering the logo and watch it disappear
(and sometimes something even uglier appear - your mileage may vary).

This filter accepts the following options:
@table @option

@item x, y
Specify the top left corner coordinates of the logo. They must be
specified.

@item w, h
Specify the width and height of the logo to clear. They must be
specified.

@item band, t
Specify the thickness of the fuzzy edge of the rectangle (added to
@var{w} and @var{h}). The default value is 4.

@item show
When set to 1, a green rectangle is drawn on the screen to simplify
finding the right @var{x}, @var{y}, @var{w}, @var{h} parameters, and
@var{band} is set to 4. The default value is 0.

@end table

Some examples follow.

@itemize

@item
Set a rectangle covering the area with top left corner coordinates 0,0
and size 100x77, setting a band of size 10:
@example
delogo=x=0:y=0:w=100:h=77:band=10
@end example

@end itemize

@section drawbox

Draw a colored box on the input image.

This filter accepts the following options:

@table @option

@item x, y
Specify the top left corner coordinates of the box. Default to 0.

@item width, height
Specify the width and height of the box, if 0 they are interpreted as
the input width and height. Default to 0.

@item color
Specify the color of the box to write, it can be the name of a color
(case insensitive match) or a 0xRRGGBB[AA] sequence.
@end table

Follow some examples:
@example
# draw a black box around the edge of the input image
drawbox

# draw a box with color red and an opacity of 50%
drawbox=x=10:y=20:width=200:height=60:color=red@@0.5"
@end example

@section drawtext

Draw text string or text from specified file on top of video using the
libfreetype library.

To enable compilation of this filter you need to configure Libav with
@code{--enable-libfreetype}.

The filter also recognizes strftime() sequences in the provided text
and expands them accordingly. Check the documentation of strftime().

The description of the accepted parameters follows.

@table @option

@item fontfile
The font file to be used for drawing text. Path must be included.
This parameter is mandatory.

@item text
The text string to be drawn. The text must be a sequence of UTF-8
encoded characters.
This parameter is mandatory if no file is specified with the parameter
@var{textfile}.

@item textfile
A text file containing text to be drawn. The text must be a sequence
of UTF-8 encoded characters.

This parameter is mandatory if no text string is specified with the
parameter @var{text}.

If both text and textfile are specified, an error is thrown.

@item x, y
The offsets where text will be drawn within the video frame.
Relative to the top/left border of the output image.
They accept expressions similar to the @ref{overlay} filter:
@table @option

@item x, y
the computed values for @var{x} and @var{y}. They are evaluated for
each new frame.

@item main_w, main_h
main input width and height

@item W, H
same as @var{main_w} and @var{main_h}

@item text_w, text_h
rendered text width and height

@item w, h
same as @var{text_w} and @var{text_h}

@item n
the number of frames processed, starting from 0

@item t
timestamp expressed in seconds, NAN if the input timestamp is unknown

@end table

The default value of @var{x} and @var{y} is 0.

@item fontsize
The font size to be used for drawing text.
The default value of @var{fontsize} is 16.

@item fontcolor
The color to be used for drawing fonts.
Either a string (e.g. "red") or in 0xRRGGBB[AA] format
(e.g. "0xff000033"), possibly followed by an alpha specifier.
The default value of @var{fontcolor} is "black".

@item boxcolor
The color to be used for drawing box around text.
Either a string (e.g. "yellow") or in 0xRRGGBB[AA] format
(e.g. "0xff00ff"), possibly followed by an alpha specifier.
The default value of @var{boxcolor} is "white".

@item box
Used to draw a box around text using background color.
Value should be either 1 (enable) or 0 (disable).
The default value of @var{box} is 0.

@item shadowx, shadowy
The x and y offsets for the text shadow position with respect to the
position of the text. They can be either positive or negative
values. Default value for both is "0".

@item shadowcolor
The color to be used for drawing a shadow behind the drawn text.  It
can be a color name (e.g. "yellow") or a string in the 0xRRGGBB[AA]
form (e.g. "0xff00ff"), possibly followed by an alpha specifier.
The default value of @var{shadowcolor} is "black".

@item ft_load_flags
Flags to be used for loading the fonts.

The flags map the corresponding flags supported by libfreetype, and are
a combination of the following values:
@table @var
@item default
@item no_scale
@item no_hinting
@item render
@item no_bitmap
@item vertical_layout
@item force_autohint
@item crop_bitmap
@item pedantic
@item ignore_global_advance_width
@item no_recurse
@item ignore_transform
@item monochrome
@item linear_design
@item no_autohint
@item end table
@end table

Default value is "render".

For more information consult the documentation for the FT_LOAD_*
libfreetype flags.

@item tabsize
The size in number of spaces to use for rendering the tab.
Default value is 4.

@item fix_bounds
If true, check and fix text coords to avoid clipping.
@end table

For example the command:
@example
drawtext="fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf: text='Test Text'"
@end example

will draw "Test Text" with font FreeSerif, using the default values
for the optional parameters.

The command:
@example
drawtext="fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf: text='Test Text':\
          x=100: y=50: fontsize=24: fontcolor=yellow@@0.2: box=1: boxcolor=red@@0.2"
@end example

will draw 'Test Text' with font FreeSerif of size 24 at position x=100
and y=50 (counting from the top-left corner of the screen), text is
yellow with a red box around it. Both the text and the box have an
opacity of 20%.

Note that the double quotes are not necessary if spaces are not used
within the parameter list.

For more information about libfreetype, check:
@url{http://www.freetype.org/}.

@section fade

Apply fade-in/out effect to input video.

This filter accepts the following options:

@table @option

@item type
The effect type -- can be either "in" for fade-in, or "out" for a fade-out
effect.

@item start_frame
The number of the start frame for starting to apply the fade effect.

@item nb_frames
The number of frames for which the fade effect has to last. At the end of the
fade-in effect the output video will have the same intensity as the input video,
at the end of the fade-out transition the output video will be completely black.

@end table

A few usage examples follow, usable too as test scenarios.
@example
# fade in first 30 frames of video
fade=type=in:nb_frames=30

# fade out last 45 frames of a 200-frame video
fade=type=out:start_frame=155:nb_frames=45

# fade in first 25 frames and fade out last 25 frames of a 1000-frame video
fade=type=in:start_frame=0:nb_frames=25, fade=type=out:start_frame=975:nb_frames=25

# make first 5 frames black, then fade in from frame 5-24
fade=type=in:start_frame=5:nb_frames=20
@end example

@section fieldorder

Transform the field order of the input video.

This filter accepts the following options:

@table @option

@item order
Output field order. Valid values are @var{tff} for top field first or @var{bff}
for bottom field first.
@end table

Default value is "tff".

Transformation is achieved by shifting the picture content up or down
by one line, and filling the remaining line with appropriate picture content.
This method is consistent with most broadcast field order converters.

If the input video is not flagged as being interlaced, or it is already
flagged as being of the required output field order then this filter does
not alter the incoming video.

This filter is very useful when converting to or from PAL DV material,
which is bottom field first.

For example:
@example
./avconv -i in.vob -vf "fieldorder=order=bff" out.dv
@end example

@section fifo

Buffer input images and send them when they are requested.

This filter is mainly useful when auto-inserted by the libavfilter
framework.

The filter does not take parameters.

@section format

Convert the input video to one of the specified pixel formats.
Libavfilter will try to pick one that is supported for the input to
the next filter.

This filter accepts the following parameters:
@table @option

@item pix_fmts
A '|'-separated list of pixel format names, for example
"pix_fmts=yuv420p|monow|rgb24".

@end table

Some examples follow:
@example
# convert the input video to the format "yuv420p"
format=pix_fmts=yuv420p

# convert the input video to any of the formats in the list
format=pix_fmts=yuv420p|yuv444p|yuv410p
@end example

@section fps

Convert the video to specified constant framerate by duplicating or dropping
frames as necessary.

This filter accepts the following named parameters:
@table @option

@item fps
Desired output framerate.

@end table

@anchor{frei0r}
@section frei0r

Apply a frei0r effect to the input video.

To enable compilation of this filter you need to install the frei0r
header and configure Libav with --enable-frei0r.

This filter accepts the following options:

@table @option

@item filter_name
The name to the frei0r effect to load. If the environment variable
@env{FREI0R_PATH} is defined, the frei0r effect is searched in each one of the
directories specified by the colon separated list in @env{FREIOR_PATH},
otherwise in the standard frei0r paths, which are in this order:
@file{HOME/.frei0r-1/lib/}, @file{/usr/local/lib/frei0r-1/},
@file{/usr/lib/frei0r-1/}.

@item filter_params
A '|'-separated list of parameters to pass to the frei0r effect.

@end table

A frei0r effect parameter can be a boolean (whose values are specified
with "y" and "n"), a double, a color (specified by the syntax
@var{R}/@var{G}/@var{B}, @var{R}, @var{G}, and @var{B} being float
numbers from 0.0 to 1.0) or by an @code{av_parse_color()} color
description), a position (specified by the syntax @var{X}/@var{Y},
@var{X} and @var{Y} being float numbers) and a string.

The number and kind of parameters depend on the loaded effect. If an
effect parameter is not specified the default value is set.

Some examples follow:
@example
# apply the distort0r effect, set the first two double parameters
frei0r=filter_name=distort0r:filter_params=0.5|0.01

# apply the colordistance effect, takes a color as first parameter
frei0r=colordistance:0.2/0.3/0.4
frei0r=colordistance:violet
frei0r=colordistance:0x112233

# apply the perspective effect, specify the top left and top right
# image positions
frei0r=perspective:0.2/0.2|0.8/0.2
@end example

For more information see:
@url{http://piksel.org/frei0r}

@section gradfun

Fix the banding artifacts that are sometimes introduced into nearly flat
regions by truncation to 8bit colordepth.
Interpolate the gradients that should go where the bands are, and
dither them.

This filter is designed for playback only.  Do not use it prior to
lossy compression, because compression tends to lose the dither and
bring back the bands.

This filter accepts the following options:

@table @option

@item strength
The maximum amount by which the filter will change any one pixel. Also the
threshold for detecting nearly flat regions. Acceptable values range from .51 to
64, default value is 1.2, out-of-range values will be clipped to the valid
range.

@item radius
The neighborhood to fit the gradient to. A larger radius makes for smoother
gradients, but also prevents the filter from modifying the pixels near detailed
regions. Acceptable values are 8-32, default value is 16, out-of-range values
will be clipped to the valid range.

@end table

@example
# default parameters
gradfun=strength=1.2:radius=16

# omitting radius
gradfun=1.2
@end example

@section hflip

Flip the input video horizontally.

For example to horizontally flip the input video with @command{avconv}:
@example
avconv -i in.avi -vf "hflip" out.avi
@end example

@section hqdn3d

High precision/quality 3d denoise filter. This filter aims to reduce
image noise producing smooth images and making still images really
still. It should enhance compressibility.

It accepts the following optional parameters:

@table @option
@item luma_spatial
a non-negative float number which specifies spatial luma strength,
defaults to 4.0

@item chroma_spatial
a non-negative float number which specifies spatial chroma strength,
defaults to 3.0*@var{luma_spatial}/4.0

@item luma_tmp
a float number which specifies luma temporal strength, defaults to
6.0*@var{luma_spatial}/4.0

@item chroma_tmp
a float number which specifies chroma temporal strength, defaults to
@var{luma_tmp}*@var{chroma_spatial}/@var{luma_spatial}
@end table

@section interlace

Simple interlacing filter from progressive contents. This interleaves upper (or
lower) lines from odd frames with lower (or upper) lines from even frames,
halving the frame rate and preserving image height.

@example
   Original        Original             New Frame
   Frame 'j'      Frame 'j+1'             (tff)
  ==========      ===========       ==================
    Line 0  -------------------->    Frame 'j' Line 0
    Line 1          Line 1  ---->   Frame 'j+1' Line 1
    Line 2 --------------------->    Frame 'j' Line 2
    Line 3          Line 3  ---->   Frame 'j+1' Line 3
     ...             ...                   ...
New Frame + 1 will be generated by Frame 'j+2' and Frame 'j+3' and so on
@end example

It accepts the following optional parameters:

@table @option
@item scan
determines whether the interlaced frame is taken from the even (tff - default)
or odd (bff) lines of the progressive frame.

@item lowpass
Enable (default) or disable the vertical lowpass filter to avoid twitter
interlacing and reduce moire patterns.
@end table

@section lut, lutrgb, lutyuv

Compute a look-up table for binding each pixel component input value
to an output value, and apply it to input video.

@var{lutyuv} applies a lookup table to a YUV input video, @var{lutrgb}
to an RGB input video.

These filters accept the following options:
@table @option
@item @var{c0} (first  pixel component)
@item @var{c1} (second pixel component)
@item @var{c2} (third  pixel component)
@item @var{c3} (fourth pixel component, corresponds to the alpha component)

@item @var{r} (red component)
@item @var{g} (green component)
@item @var{b} (blue component)
@item @var{a} (alpha component)

@item @var{y} (Y/luminance component)
@item @var{u} (U/Cb component)
@item @var{v} (V/Cr component)
@end table

Each of them specifies the expression to use for computing the lookup table for
the corresponding pixel component values.

The exact component associated to each of the @var{c*} options depends on the
format in input.

The @var{lut} filter requires either YUV or RGB pixel formats in input,
@var{lutrgb} requires RGB pixel formats in input, and @var{lutyuv} requires YUV.

The expressions can contain the following constants and functions:

@table @option
@item E, PI, PHI
the corresponding mathematical approximated values for e
(euler number), pi (greek PI), PHI (golden ratio)

@item w, h
the input width and height

@item val
input value for the pixel component

@item clipval
the input value clipped in the @var{minval}-@var{maxval} range

@item maxval
maximum value for the pixel component

@item minval
minimum value for the pixel component

@item negval
the negated value for the pixel component value clipped in the
@var{minval}-@var{maxval} range , it corresponds to the expression
"maxval-clipval+minval"

@item clip(val)
the computed value in @var{val} clipped in the
@var{minval}-@var{maxval} range

@item gammaval(gamma)
the computed gamma correction value of the pixel component value
clipped in the @var{minval}-@var{maxval} range, corresponds to the
expression
"pow((clipval-minval)/(maxval-minval)\,@var{gamma})*(maxval-minval)+minval"

@end table

All expressions default to "val".

Some examples follow:
@example
# negate input video
lutrgb="r=maxval+minval-val:g=maxval+minval-val:b=maxval+minval-val"
lutyuv="y=maxval+minval-val:u=maxval+minval-val:v=maxval+minval-val"

# the above is the same as
lutrgb="r=negval:g=negval:b=negval"
lutyuv="y=negval:u=negval:v=negval"

# negate luminance
lutyuv=negval

# remove chroma components, turns the video into a graytone image
lutyuv="u=128:v=128"

# apply a luma burning effect
lutyuv="y=2*val"

# remove green and blue components
lutrgb="g=0:b=0"

# set a constant alpha channel value on input
format=rgba,lutrgb=a="maxval-minval/2"

# correct luminance gamma by a 0.5 factor
lutyuv=y=gammaval(0.5)
@end example

@section negate

Negate input video.

This filter accepts an integer in input, if non-zero it negates the
alpha component (if available). The default value in input is 0.

@section noformat

Force libavfilter not to use any of the specified pixel formats for the
input to the next filter.

This filter accepts the following parameters:
@table @option

@item pix_fmts
A '|'-separated list of pixel format names, for example
"pix_fmts=yuv420p|monow|rgb24".

@end table

Some examples follow:
@example
# force libavfilter to use a format different from "yuv420p" for the
# input to the vflip filter
noformat=pix_fmts=yuv420p,vflip

# convert the input video to any of the formats not contained in the list
noformat=yuv420p|yuv444p|yuv410p
@end example

@section null

Pass the video source unchanged to the output.

@section ocv

Apply video transform using libopencv.

To enable this filter install libopencv library and headers and
configure Libav with --enable-libopencv.

This filter accepts the following parameters:

@table @option

@item filter_name
The name of the libopencv filter to apply.

@item filter_params
The parameters to pass to the libopencv filter. If not specified the default
values are assumed.

@end table

Refer to the official libopencv documentation for more precise
information:
@url{http://opencv.willowgarage.com/documentation/c/image_filtering.html}

Follows the list of supported libopencv filters.

@anchor{dilate}
@subsection dilate

Dilate an image by using a specific structuring element.
This filter corresponds to the libopencv function @code{cvDilate}.

It accepts the parameters: @var{struct_el}|@var{nb_iterations}.

@var{struct_el} represents a structuring element, and has the syntax:
@var{cols}x@var{rows}+@var{anchor_x}x@var{anchor_y}/@var{shape}

@var{cols} and @var{rows} represent the number of columns and rows of
the structuring element, @var{anchor_x} and @var{anchor_y} the anchor
point, and @var{shape} the shape for the structuring element, and
can be one of the values "rect", "cross", "ellipse", "custom".

If the value for @var{shape} is "custom", it must be followed by a
string of the form "=@var{filename}". The file with name
@var{filename} is assumed to represent a binary image, with each
printable character corresponding to a bright pixel. When a custom
@var{shape} is used, @var{cols} and @var{rows} are ignored, the number
or columns and rows of the read file are assumed instead.

The default value for @var{struct_el} is "3x3+0x0/rect".

@var{nb_iterations} specifies the number of times the transform is
applied to the image, and defaults to 1.

Follow some example:
@example
# use the default values
ocv=dilate

# dilate using a structuring element with a 5x5 cross, iterate two times
ocv=filter_name=dilate:filter_params=5x5+2x2/cross|2

# read the shape from the file diamond.shape, iterate two times
# the file diamond.shape may contain a pattern of characters like this:
#   *
#  ***
# *****
#  ***
#   *
# the specified cols and rows are ignored (but not the anchor point coordinates)
ocv=dilate:0x0+2x2/custom=diamond.shape|2
@end example

@subsection erode

Erode an image by using a specific structuring element.
This filter corresponds to the libopencv function @code{cvErode}.

The filter accepts the parameters: @var{struct_el}:@var{nb_iterations},
with the same syntax and semantics as the @ref{dilate} filter.

@subsection smooth

Smooth the input video.

The filter takes the following parameters:
@var{type}|@var{param1}|@var{param2}|@var{param3}|@var{param4}.

@var{type} is the type of smooth filter to apply, and can be one of
the following values: "blur", "blur_no_scale", "median", "gaussian",
"bilateral". The default value is "gaussian".

@var{param1}, @var{param2}, @var{param3}, and @var{param4} are
parameters whose meanings depend on smooth type. @var{param1} and
@var{param2} accept integer positive values or 0, @var{param3} and
@var{param4} accept float values.

The default value for @var{param1} is 3, the default value for the
other parameters is 0.

These parameters correspond to the parameters assigned to the
libopencv function @code{cvSmooth}.

@anchor{overlay}
@section overlay

Overlay one video on top of another.

It takes two inputs and one output, the first input is the "main"
video on which the second input is overlayed.

This filter accepts the following parameters:

@table @option

@item x
The horizontal position of the left edge of the overlaid video on the main video.

@item y
The vertical position of the top edge of the overlaid video on the main video.

@end table

The parameters are expressions containing the following parameters:

@table @option
@item main_w, main_h
main input width and height

@item W, H
same as @var{main_w} and @var{main_h}

@item overlay_w, overlay_h
overlay input width and height

@item w, h
same as @var{overlay_w} and @var{overlay_h}
@end table

Be aware that frames are taken from each input video in timestamp
order, hence, if their initial timestamps differ, it is a a good idea
to pass the two inputs through a @var{setpts=PTS-STARTPTS} filter to
have them begin in the same zero timestamp, as it does the example for
the @var{movie} filter.

Follow some examples:
@example
# draw the overlay at 10 pixels from the bottom right
# corner of the main video.
overlay=x=main_w-overlay_w-10:y=main_h-overlay_h-10

# insert a transparent PNG logo in the bottom left corner of the input
avconv -i input -i logo -filter_complex 'overlay=x=10:y=main_h-overlay_h-10' output

# insert 2 different transparent PNG logos (second logo on bottom
# right corner):
avconv -i input -i logo1 -i logo2 -filter_complex
'overlay=x=10:y=H-h-10,overlay=x=W-w-10:y=H-h-10' output

# add a transparent color layer on top of the main video,
# WxH specifies the size of the main input to the overlay filter
color=red@.3:WxH [over]; [in][over] overlay [out]
@end example

You can chain together more overlays but the efficiency of such
approach is yet to be tested.

@section pad

Add paddings to the input image, and places the original input at the
given coordinates @var{x}, @var{y}.

This filter accepts the following parameters:

@table @option
@item width, height

Specify the size of the output image with the paddings added. If the
value for @var{width} or @var{height} is 0, the corresponding input size
is used for the output.

The @var{width} expression can reference the value set by the
@var{height} expression, and vice versa.

The default value of @var{width} and @var{height} is 0.

@item x, y

Specify the offsets where to place the input image in the padded area
with respect to the top/left border of the output image.

The @var{x} expression can reference the value set by the @var{y}
expression, and vice versa.

The default value of @var{x} and @var{y} is 0.

@item color

Specify the color of the padded area, it can be the name of a color
(case insensitive match) or a 0xRRGGBB[AA] sequence.

The default value of @var{color} is "black".

@end table

The parameters @var{width}, @var{height}, @var{x}, and @var{y} are
expressions containing the following constants:

@table @option
@item E, PI, PHI
the corresponding mathematical approximated values for e
(euler number), pi (greek PI), phi (golden ratio)

@item in_w, in_h
the input video width and height

@item iw, ih
same as @var{in_w} and @var{in_h}

@item out_w, out_h
the output width and height, that is the size of the padded area as
specified by the @var{width} and @var{height} expressions

@item ow, oh
same as @var{out_w} and @var{out_h}

@item x, y
x and y offsets as specified by the @var{x} and @var{y}
expressions, or NAN if not yet specified

@item a
input display aspect ratio, same as @var{iw} / @var{ih}

@item hsub, vsub
horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" @var{hsub} is 2 and @var{vsub} is 1.
@end table

Some examples follow:

@example
# Add paddings with color "violet" to the input video. Output video
# size is 640x480, the top-left corner of the input video is placed at
# column 0, row 40.
pad=width=640:height=480:x=0:y=40:color=violet

# pad the input to get an output with dimensions increased bt 3/2,
# and put the input video at the center of the padded area
pad="3/2*iw:3/2*ih:(ow-iw)/2:(oh-ih)/2"

# pad the input to get a squared output with size equal to the maximum
# value between the input width and height, and put the input video at
# the center of the padded area
pad="max(iw\,ih):ow:(ow-iw)/2:(oh-ih)/2"

# pad the input to get a final w/h ratio of 16:9
pad="ih*16/9:ih:(ow-iw)/2:(oh-ih)/2"

# double output size and put the input video in the bottom-right
# corner of the output padded area
pad="2*iw:2*ih:ow-iw:oh-ih"
@end example

@section pixdesctest

Pixel format descriptor test filter, mainly useful for internal
testing. The output video should be equal to the input video.

For example:
@example
format=monow, pixdesctest
@end example

can be used to test the monowhite pixel format descriptor definition.

@section scale

Scale the input video and/or convert the image format.

This filter accepts the following options:

@table @option

@item w
Output video width.

@item h
Output video height.

@end table

The parameters @var{w} and @var{h} are expressions containing
the following constants:

@table @option
@item E, PI, PHI
the corresponding mathematical approximated values for e
(euler number), pi (greek PI), phi (golden ratio)

@item in_w, in_h
the input width and height

@item iw, ih
same as @var{in_w} and @var{in_h}

@item out_w, out_h
the output (cropped) width and height

@item ow, oh
same as @var{out_w} and @var{out_h}

@item dar, a
input display aspect ratio, same as @var{iw} / @var{ih}

@item sar
input sample aspect ratio

@item hsub, vsub
horizontal and vertical chroma subsample values. For example for the
pixel format "yuv422p" @var{hsub} is 2 and @var{vsub} is 1.
@end table

If the input image format is different from the format requested by
the next filter, the scale filter will convert the input to the
requested format.

If the value for @var{w} or @var{h} is 0, the respective input
size is used for the output.

If the value for @var{w} or @var{h} is -1, the scale filter will use, for the
respective output size, a value that maintains the aspect ratio of the input
image.

The default value of @var{w} and @var{h} is 0.

Some examples follow:
@example
# scale the input video to a size of 200x100.
scale=w=200:h=100

# scale the input to 2x
scale=w=2*iw:h=2*ih
# the above is the same as
scale=2*in_w:2*in_h

# scale the input to half size
scale=w=iw/2:h=ih/2

# increase the width, and set the height to the same size
scale=3/2*iw:ow

# seek for Greek harmony
scale=iw:1/PHI*iw
scale=ih*PHI:ih

# increase the height, and set the width to 3/2 of the height
scale=w=3/2*oh:h=3/5*ih

# increase the size, but make the size a multiple of the chroma
scale="trunc(3/2*iw/hsub)*hsub:trunc(3/2*ih/vsub)*vsub"

# increase the width to a maximum of 500 pixels, keep the same input aspect ratio
scale=w='min(500\, iw*3/2):h=-1'
@end example

@section select
Select frames to pass in output.

This filter accepts the following options:

@table @option

@item expr
An expression, which is evaluated for each input frame. If the expression is
evaluated to a non-zero value, the frame is selected and passed to the output,
otherwise it is discarded.

@end table

The expression can contain the following constants:

@table @option
@item PI
Greek PI

@item PHI
golden ratio

@item E
Euler number

@item n
the sequential number of the filtered frame, starting from 0

@item selected_n
the sequential number of the selected frame, starting from 0

@item prev_selected_n
the sequential number of the last selected frame, NAN if undefined

@item TB
timebase of the input timestamps

@item pts
the PTS (Presentation TimeStamp) of the filtered video frame,
expressed in @var{TB} units, NAN if undefined

@item t
the PTS (Presentation TimeStamp) of the filtered video frame,
expressed in seconds, NAN if undefined

@item prev_pts
the PTS of the previously filtered video frame, NAN if undefined

@item prev_selected_pts
the PTS of the last previously filtered video frame, NAN if undefined

@item prev_selected_t
the PTS of the last previously selected video frame, NAN if undefined

@item start_pts
the PTS of the first video frame in the video, NAN if undefined

@item start_t
the time of the first video frame in the video, NAN if undefined

@item pict_type
the type of the filtered frame, can assume one of the following
values:
@table @option
@item I
@item P
@item B
@item S
@item SI
@item SP
@item BI
@end table

@item interlace_type
the frame interlace type, can assume one of the following values:
@table @option
@item PROGRESSIVE
the frame is progressive (not interlaced)
@item TOPFIRST
the frame is top-field-first
@item BOTTOMFIRST
the frame is bottom-field-first
@end table

@item key
1 if the filtered frame is a key-frame, 0 otherwise

@end table

The default value of the select expression is "1".

Some examples follow:

@example
# select all frames in input
select

# the above is the same as:
select=expr=1

# skip all frames:
select=expr=0

# select only I-frames
select='expr=eq(pict_type\,I)'

# select one frame every 100
select='not(mod(n\,100))'

# select only frames contained in the 10-20 time interval
select='gte(t\,10)*lte(t\,20)'

# select only I frames contained in the 10-20 time interval
select='gte(t\,10)*lte(t\,20)*eq(pict_type\,I)'

# select frames with a minimum distance of 10 seconds
select='isnan(prev_selected_t)+gte(t-prev_selected_t\,10)'
@end example

@anchor{setdar}
@section setdar

Set the Display Aspect Ratio for the filter output video.

This is done by changing the specified Sample (aka Pixel) Aspect
Ratio, according to the following equation:
@math{DAR = HORIZONTAL_RESOLUTION / VERTICAL_RESOLUTION * SAR}

Keep in mind that this filter does not modify the pixel dimensions of
the video frame. Also the display aspect ratio set by this filter may
be changed by later filters in the filterchain, e.g. in case of
scaling or if another "setdar" or a "setsar" filter is applied.

This filter accepts the following options:

@table @option

@item dar
Output display aspect ratio, as a rational or a decimal number.

@end table

For example to change the display aspect ratio to 16:9, specify:
@example
setdar=dar=16/9
# the above is equivalent to
setdar=dar=1.77777
@end example

See also the @ref{setsar} filter documentation.

@section setpts

Change the PTS (presentation timestamp) of the input video frames.

This filter accepts the following options:

@table @option

@item expr
The expression which is evaluated for each frame to construct its timestamp.

@end table

The expression is evaluated through the eval API and can contain the following
constants:

@table @option
@item PTS
the presentation timestamp in input

@item PI
Greek PI

@item PHI
golden ratio

@item E
Euler number

@item N
the count of the input frame, starting from 0.

@item STARTPTS
the PTS of the first video frame

@item INTERLACED
tell if the current frame is interlaced

@item PREV_INPTS
previous input PTS

@item PREV_OUTPTS
previous output PTS

@item RTCTIME
wallclock (RTC) time in microseconds

@item RTCSTART
wallclock (RTC) time at the start of the movie in microseconds

@end table

Some examples follow:

@example
# start counting PTS from zero
setpts=expr=PTS-STARTPTS

# fast motion
setpts=expr=0.5*PTS

# slow motion
setpts=2.0*PTS

# fixed rate 25 fps
setpts=N/(25*TB)

# fixed rate 25 fps with some jitter
setpts='1/(25*TB) * (N + 0.05 * sin(N*2*PI/25))'

# generate timestamps from a "live source" and rebase onto the current timebase
setpts='(RTCTIME - RTCSTART) / (TB * 1000000)"
@end example

@anchor{setsar}
@section setsar

Set the Sample (aka Pixel) Aspect Ratio for the filter output video.

Note that as a consequence of the application of this filter, the
output display aspect ratio will change according to the following
equation:
@math{DAR = HORIZONTAL_RESOLUTION / VERTICAL_RESOLUTION * SAR}

Keep in mind that the sample aspect ratio set by this filter may be
changed by later filters in the filterchain, e.g. if another "setsar"
or a "setdar" filter is applied.

This filter accepts the following options:

@table @option

@item sar
Output sample aspect ratio, as a rational or decimal number.

@end table

For example to change the sample aspect ratio to 10:11, specify:
@example
setsar=sar=10/11
@end example

@section settb

Set the timebase to use for the output frames timestamps.
It is mainly useful for testing timebase configuration.

This filter accepts the following options:

@table @option

@item expr
The expression which is evaluated into the output timebase.

@end table

The expression can contain the constants "PI", "E", "PHI", "AVTB" (the
default timebase), and "intb" (the input timebase).

The default value for the input is "intb".

Follow some examples.

@example
# set the timebase to 1/25
settb=expr=1/25

# set the timebase to 1/10
settb=expr=0.1

#set the timebase to 1001/1000
settb=1+0.001

#set the timebase to 2*intb
settb=2*intb

#set the default timebase value
settb=AVTB
@end example

@section showinfo

Show a line containing various information for each input video frame.
The input video is not modified.

The shown line contains a sequence of key/value pairs of the form
@var{key}:@var{value}.

A description of each shown parameter follows:

@table @option
@item n
sequential number of the input frame, starting from 0

@item pts
Presentation TimeStamp of the input frame, expressed as a number of
time base units. The time base unit depends on the filter input pad.

@item pts_time
Presentation TimeStamp of the input frame, expressed as a number of
seconds

@item pos
position of the frame in the input stream, -1 if this information in
unavailable and/or meaningless (for example in case of synthetic video)

@item fmt
pixel format name

@item sar
sample aspect ratio of the input frame, expressed in the form
@var{num}/@var{den}

@item s
size of the input frame, expressed in the form
@var{width}x@var{height}

@item i
interlaced mode ("P" for "progressive", "T" for top field first, "B"
for bottom field first)

@item iskey
1 if the frame is a key frame, 0 otherwise

@item type
picture type of the input frame ("I" for an I-frame, "P" for a
P-frame, "B" for a B-frame, "?" for unknown type).
Check also the documentation of the @code{AVPictureType} enum and of
the @code{av_get_picture_type_char} function defined in
@file{libavutil/avutil.h}.

@item checksum
Adler-32 checksum of all the planes of the input frame

@item plane_checksum
Adler-32 checksum of each plane of the input frame, expressed in the form
"[@var{c0} @var{c1} @var{c2} @var{c3}]"
@end table

@section split

Split input video into several identical outputs.

The filter accepts a single parameter which specifies the number of outputs. If
unspecified, it defaults to 2.

For example
@example
avconv -i INPUT -filter_complex split=5 OUTPUT
@end example
will create 5 copies of the input video.

@section transpose

Transpose rows with columns in the input video and optionally flip it.

This filter accepts the following options:

@table @option

@item dir
The direction of the transpose.

@end table

The direction can assume the following values:

@table @samp
@item cclock_flip
Rotate by 90 degrees counterclockwise and vertically flip (default), that is:
@example
L.R     L.l
. . ->  . .
l.r     R.r
@end example

@item clock
Rotate by 90 degrees clockwise, that is:
@example
L.R     l.L
. . ->  . .
l.r     r.R
@end example

@item cclock
Rotate by 90 degrees counterclockwise, that is:
@example
L.R     R.r
. . ->  . .
l.r     L.l
@end example

@item clock_flip
Rotate by 90 degrees clockwise and vertically flip, that is:
@example
L.R     r.R
. . ->  . .
l.r     l.L
@end example
@end table

@section unsharp

Sharpen or blur the input video.

It accepts the following parameters:

@table @option

@item luma_msize_x
Set the luma matrix horizontal size. It can be an integer between 3
and 13, default value is 5.

@item luma_msize_y
Set the luma matrix vertical size. It can be an integer between 3
and 13, default value is 5.

@item luma_amount
Set the luma effect strength. It can be a float number between -2.0
and 5.0, default value is 1.0.

@item chroma_msize_x
Set the chroma matrix horizontal size. It can be an integer between 3
and 13, default value is 5.

@item chroma_msize_y
Set the chroma matrix vertical size. It can be an integer between 3
and 13, default value is 5.

@item luma_amount
Set the chroma effect strength. It can be a float number between -2.0
and 5.0, default value is 0.0.

@end table

Negative values for the amount will blur the input video, while positive
values will sharpen. All parameters are optional and default to the
equivalent of the string '5:5:1.0:5:5:0.0'.

@example
# Strong luma sharpen effect parameters
unsharp=luma_msize_x=7:luma_msize_y=7:luma_amount=2.5

# Strong blur of both luma and chroma parameters
unsharp=7:7:-2:7:7:-2

# Use the default values with @command{avconv}
./avconv -i in.avi -vf "unsharp" out.mp4
@end example

@section vflip

Flip the input video vertically.

@example
./avconv -i in.avi -vf "vflip" out.avi
@end example

@section yadif

Deinterlace the input video ("yadif" means "yet another deinterlacing
filter").

This filter accepts the following options:

@table @option

@item mode
The interlacing mode to adopt, accepts one of the following values:

@table @option
@item 0
output 1 frame for each frame
@item 1
output 1 frame for each field
@item 2
like 0 but skips spatial interlacing check
@item 3
like 1 but skips spatial interlacing check
@end table

Default value is 0.

@item parity
The picture field parity assumed for the input interlaced video, accepts one of
the following values:

@table @option
@item 0
assume top field first
@item 1
assume bottom field first
@item -1
enable automatic detection
@end table

Default value is -1.
If interlacing is unknown or decoder does not export this information,
top field first will be assumed.

@item auto
Whether deinterlacer should trust the interlaced flag and only deinterlace
frames marked as interlaced

@table @option
@item 0
deinterlace all frames
@item 1
only deinterlace frames marked as interlaced
@end table

Default value is 0.

@end table

@c man end VIDEO FILTERS

@chapter Video Sources
@c man begin VIDEO SOURCES

Below is a description of the currently available video sources.

@section buffer

Buffer video frames, and make them available to the filter chain.

This source is mainly intended for a programmatic use, in particular
through the interface defined in @file{libavfilter/vsrc_buffer.h}.

This filter accepts the following parameters:

@table @option

@item width
Input video width.

@item height
Input video height.

@item pix_fmt
Name of the input video pixel format.

@item time_base
The time base used for input timestamps.

@item sar
Sample (pixel) aspect ratio of the input video.

@end table

For example:
@example
buffer=width=320:height=240:pix_fmt=yuv410p:time_base=1/24:sar=1
@end example

will instruct the source to accept video frames with size 320x240 and
with format "yuv410p", assuming 1/24 as the timestamps timebase and
square pixels (1:1 sample aspect ratio).

@section color

Provide an uniformly colored input.

It accepts the following parameters:

@table @option

@item color
Specify the color of the source. It can be the name of a color (case
insensitive match) or a 0xRRGGBB[AA] sequence, possibly followed by an
alpha specifier. The default value is "black".

@item size
Specify the size of the sourced video, it may be a string of the form
@var{width}x@var{height}, or the name of a size abbreviation. The
default value is "320x240".

@item framerate
Specify the frame rate of the sourced video, as the number of frames
generated per second. It has to be a string in the format
@var{frame_rate_num}/@var{frame_rate_den}, an integer number, a float
number or a valid video frame rate abbreviation. The default value is
"25".

@end table

For example the following graph description will generate a red source
with an opacity of 0.2, with size "qcif" and a frame rate of 10
frames per second, which will be overlayed over the source connected
to the pad with identifier "in".

@example
"color=red@@0.2:qcif:10 [color]; [in][color] overlay [out]"
@end example

@section movie

Read a video stream from a movie container.

Note that this source is a hack that bypasses the standard input path. It can be
useful in applications that do not support arbitrary filter graphs, but its use
is discouraged in those that do. Specifically in @command{avconv} this filter
should never be used, the @option{-filter_complex} option fully replaces it.

This filter accepts the following options:

@table @option

@item filename
The name of the resource to read (not necessarily a file but also a device or a
stream accessed through some protocol).

@item format_name, f
Specifies the format assumed for the movie to read, and can be either
the name of a container or an input device. If not specified the
format is guessed from @var{movie_name} or by probing.

@item seek_point, sp
Specifies the seek point in seconds, the frames will be output
starting from this seek point, the parameter is evaluated with
@code{av_strtod} so the numerical value may be suffixed by an IS
postfix. Default value is "0".

@item stream_index, si
Specifies the index of the video stream to read. If the value is -1,
the best suited video stream will be automatically selected. Default
value is "-1".

@end table

This filter allows to overlay a second video on top of main input of
a filtergraph as shown in this graph:
@example
input -----------> deltapts0 --> overlay --> output
                                    ^
                                    |
movie --> scale--> deltapts1 -------+
@end example

Some examples follow:
@example
# skip 3.2 seconds from the start of the avi file in.avi, and overlay it
# on top of the input labelled as "in".
movie=in.avi:seek_point=3.2, scale=180:-1, setpts=PTS-STARTPTS [movie];
[in] setpts=PTS-STARTPTS, [movie] overlay=16:16 [out]

# read from a video4linux2 device, and overlay it on top of the input
# labelled as "in"
movie=/dev/video0:f=video4linux2, scale=180:-1, setpts=PTS-STARTPTS [movie];
[in] setpts=PTS-STARTPTS, [movie] overlay=16:16 [out]

@end example

@section nullsrc

Null video source, never return images. It is mainly useful as a
template and to be employed in analysis / debugging tools.

It accepts as optional parameter a string of the form
@var{width}:@var{height}:@var{timebase}.

@var{width} and @var{height} specify the size of the configured
source. The default values of @var{width} and @var{height} are
respectively 352 and 288 (corresponding to the CIF size format).

@var{timebase} specifies an arithmetic expression representing a
timebase. The expression can contain the constants "PI", "E", "PHI",
"AVTB" (the default timebase), and defaults to the value "AVTB".

@section frei0r_src

Provide a frei0r source.

To enable compilation of this filter you need to install the frei0r
header and configure Libav with --enable-frei0r.

This source accepts the following options:

@table @option

@item size
The size of the video to generate, may be a string of the form
@var{width}x@var{height} or a frame size abbreviation.

@item framerate
Framerate of the generated video, may be a string of the form
@var{num}/@var{den} or a frame rate abbreviation.

@item filter_name
The name to the frei0r source to load. For more information regarding frei0r and
how to set the parameters read the section @ref{frei0r} in the description of
the video filters.

@item filter_params
A '|'-separated list of parameters to pass to the frei0r source.

@end table

Some examples follow:
@example
# generate a frei0r partik0l source with size 200x200 and framerate 10
# which is overlayed on the overlay filter main input
frei0r_src=size=200x200:framerate=10:filter_name=partik0l:filter_params=1234 [overlay]; [in][overlay] overlay
@end example

@section rgbtestsrc, testsrc

The @code{rgbtestsrc} source generates an RGB test pattern useful for
detecting RGB vs BGR issues. You should see a red, green and blue
stripe from top to bottom.

The @code{testsrc} source generates a test video pattern, showing a
color pattern, a scrolling gradient and a timestamp. This is mainly
intended for testing purposes.

The sources accept the following options:

@table @option

@item size, s
Specify the size of the sourced video, it may be a string of the form
@var{width}x@var{height}, or the name of a size abbreviation. The
default value is "320x240".

@item rate, r
Specify the frame rate of the sourced video, as the number of frames
generated per second. It has to be a string in the format
@var{frame_rate_num}/@var{frame_rate_den}, an integer number, a float
number or a valid video frame rate abbreviation. The default value is
"25".

@item sar
Set the sample aspect ratio of the sourced video.

@item duration
Set the video duration of the sourced video. The accepted syntax is:
@example
[-]HH[:MM[:SS[.m...]]]
[-]S+[.m...]
@end example
See also the function @code{av_parse_time()}.

If not specified, or the expressed duration is negative, the video is
supposed to be generated forever.
@end table

For example the following:
@example
testsrc=duration=5.3:size=qcif:rate=10
@end example

will generate a video with a duration of 5.3 seconds, with size
176x144 and a framerate of 10 frames per second.

@c man end VIDEO SOURCES

@chapter Video Sinks
@c man begin VIDEO SINKS

Below is a description of the currently available video sinks.

@section buffersink

Buffer video frames, and make them available to the end of the filter
graph.

This sink is intended for a programmatic use through the interface defined in
@file{libavfilter/buffersink.h}.

@section nullsink

Null video sink, do absolutely nothing with the input video. It is
mainly useful as a template and to be employed in analysis / debugging
tools.

@c man end VIDEO SINKS
